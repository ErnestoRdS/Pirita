.TH Pirita Backend 1 "May 2023" "Version 0.1.0" "Pirita Backend Manual"

.SH NAME
backend \- Pirita Backend. El backend de Pirita es un servidor que se encarga de recibir las peticiones de los clientes y de enviarles las respuestas correspondientes, maneja conductores, pagos, viajes, vehículos y es el encargado de comunicarse con la base de datos para entregarle la información que necesita al cliente.

.SH SYNOPSIS
.B backend
[\fIOPCIONES\fR]

.SH DESCRIPCIÓN
El backend de Pirita es un servidor hecho en Go y Fiber, que actúa como el centro de comunicación entre los clientes y la base de datos, todo a través de una REST API donde se puede consultar, escribir o modificar la información de los conductores, pagos, viajes y vehículos.

.SS CONSIDERACIONES
En la primer ejecución del servidor, se creará una base de datos SQLite en el directorio donde se ejecuta el servidor, con el nombre de db.sqlite, en caso de que ya exista una base de datos con ese nombre, se usará esa base de datos. Además, se creará un archivo keys.json en el mismo directorio, dicho archivo contiene cinco (5) llaves para la API del servidor, usted deberá guardar estas llaves, pues serán usadas por el cliente para solicitar información al servidor.

.SS CONSIDERACIONES AL COMPILAR
Por defecto, al compilar el main.go, se ejecutarán sentencias de inserción a la base de datos para agregar registros de prueba y facilitar el testeo. Con el comando \fB\go build\fR acompañado por la bandera -ldflags, se puede cambiar el valor de la variable que contiene dichas consultas y dejarla en blanco para obtener una base de datos limpia y lista para el modo de producción. El Makefile del backend cuenta con dos (2) targets para compilarlo, ya sea para una versión de 'Prueba' o para una versión final, simplemente hace falta ir a la terminal y ejecutar Make seguido por alguno de los siguientes comandos:
.TP
\fBbuild\-test\fR
Para una compilación normal con los datos de prueba.

.TP
\fBbuild\-prod\fR
Para tener un binario productivo y distribuible.

.SS ENDPOINTS DE LA REST API
La REST API tiene los siguientes endpoints:
.TP
- /api/conductores (GET, POST, PUT, DELETE) [Ruta para obtener, crear, modificar o eliminar conductores]
.TP
- /api/contratos (GET, POST, PUT, DELETE) [Ruta para obtener, crear, modificar o eliminar contratos]
.TP
- /api/pagos (GET, POST, PUT, DELETE) [Ruta para obtener, crear, modificar o eliminar pagos]
.TP
- /api/viajes (GET, POST, PUT, DELETE) [Ruta para obtener, crear, modificar o eliminar viajes]
.TP
- /api/vehiculos (GET, POST, PUT, DELETE) [Ruta para obtener, crear, modificar o eliminar vehículos]
.TP
- /monitor (GET) [Ruta para monitorear el estado del servidor. Retorna un JSON con el estado del servidor o puede verse en el navegador]
.TP
El backend de Pirita se basa en una arquitectura sólida y escalable, lo que garantiza un rendimiento óptimo incluso en entornos de alto tráfico. Utiliza técnicas de almacenamiento en caché, optimización de consultas y manejo eficiente de recursos para garantizar una respuesta rápida y confiable a las solicitudes de los clientes.

.SS MIDDLEWARES DE LA REST API
La REST API tiene los siguientes middlewares:
.TP
- Logger Fiber: Middleware para registrar las solicitudes HTTP y las respuestas HTTP.
.TP
- Limiter Fiber: Middleware para limitar las solicitudes HTTP, evitando ataques de denegación de servicio (DoS).
.TP
- KeyAuth: Middleware para autenticar las solicitudes HTTP, evitando que usuarios no autorizados accedan a la REST API si no tienen una llave válida.
.TP
- Monitor Fiber: Middleware para monitorear el estado del servidor, puede obtenerse un json con el estado del servidor o puede verse en el navegador en la ruta /monitor.

.SH OPCIONES
.TP
\fB\-h\fR, \fB\-\-help\fR
Muestra la ayuda del programa.

.TP
\fB\-p\fR, \fB\-\-port\fR
Puerto en el que se va a ejecutar el servidor.

.SH EJEMPLOS
.PP
\fBbackend \-p 8080\fR
.PP
Ejecuta el servidor en el puerto 8080.

.SH AUTOR
Pirita Backend fue desarrollado por: UpVent Technologies - 2023.

.SH COPYRIGHT

Copyright © 2023 UpVent Technologies

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see http://www.gnu.org/licenses/.
